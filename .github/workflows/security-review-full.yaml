name: Security Review (Full)

on:
  workflow_dispatch:
    inputs:
      servers:
        description: "Comma-separated list of local server names to audit (leave blank for all)."
        required: false
        default: ""

concurrency:
  group: security-review-full-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  full-audit:
    name: Execute Full Audit
    runs-on: ubuntu-24.04
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect audit targets
        run: |
          set -euo pipefail
          task ci -- collect-full-audit \
            --workspace "${{ github.workspace }}" \
            --servers "${{ github.event.inputs.servers }}" \
            --output-json audit-targets.json

          if jq -e '. | length > 0' audit-targets.json >/dev/null; then
            echo "AUDIT_HAS_TARGETS=true" >> "$GITHUB_ENV"
          else
            echo "No audit targets identified; exiting." >&2
            echo "AUDIT_HAS_TARGETS=false" >> "$GITHUB_ENV"
          fi

      - name: Prepare audit contexts
        if: env.AUDIT_HAS_TARGETS == 'true'
        run: |
          set -euo pipefail
          mkdir -p /tmp/full-audit
          rm -f full-audit-summary.md
          echo "# Full Audit Targets" >> full-audit-summary.md
          echo "" >> full-audit-summary.md

          idx=0
          jq -c '.[]' audit-targets.json | while read -r target; do
            server=$(echo "$target" | jq -r '.server')
            echo "$target" > target.json
            task ci -- prepare-full-audit \
              --target-file target.json \
              --output-dir /tmp/full-audit

            repo=$(echo "$target" | jq -r '.project')
            commit=$(echo "$target" | jq -r '.commit')
            directory=$(echo "$target" | jq -r '.directory')
            if [ -z "$directory" ] || [ "$directory" = "null" ]; then
              directory="(repository root)"
            fi

            {
              echo "## ${server}"
              echo "- Repository: ${repo}"
              echo "- Commit: \`${commit}\`"
              echo "- Directory: ${directory}"
              echo ""
            } >> full-audit-summary.md
            idx=$((idx+1))
          done

          echo "Prepared ${idx} audit targets."

      - name: Run security reviewer (Claude)
        if: env.AUDIT_HAS_TARGETS == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          INPUT_ROOT="${RUNNER_TEMP}/reviewer/input"
          OUTPUT_ROOT="${RUNNER_TEMP}/reviewer/output"
          mkdir -p "$INPUT_ROOT" "$OUTPUT_ROOT"
          cp "${{ github.workspace }}/full-audit-summary.md" "$INPUT_ROOT/summary.md"
          if [ -d /tmp/full-audit ]; then
            cp -R /tmp/full-audit "$INPUT_ROOT/full-audit"
            export REVIEW_EXTRA_ALLOWED_DIRS="/input/full-audit"
          fi

          pushd agents/security-reviewer >/dev/null
          export REVIEW_INPUT_PATH="$INPUT_ROOT"
          export REVIEW_OUTPUT_PATH_HOST="$OUTPUT_ROOT"
          export REVIEW_SUMMARY_PATH="/input/summary.md"
          export REVIEW_MODE="full"
          export REVIEW_TARGET_LABEL="full-audit"
          export REVIEW_AGENT="claude"
          cleanup() { docker compose down --volumes --remove-orphans || true; }
          trap cleanup EXIT
          docker compose up --build --abort-on-container-exit reviewer
          popd >/dev/null

          mkdir -p "${{ github.workspace }}/reports"
          cp "$OUTPUT_ROOT/security-review.md" "${{ github.workspace }}/reports/full-audit-report.md"

      - name: Upload security reports
        if: env.AUDIT_HAS_TARGETS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
          if-no-files-found: warn
